--liquibase formatted sql

-- changeset eduardo.jose:1.0 labels:ddl
-- preconditions onFail:HALT onError:HALT
-- precondition-sql-check expectedResult:0 SELECT COUNT(1) FROM pg_tables where TABLENAME = 'game'
-- comment: Create game table
CREATE TABLE game (
    id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT NOT NULL CHECK (length(description) < 600),
    company VARCHAR(60) NOT NULL,
    genres VARCHAR[10] NOT NULL,
    publisher VARCHAR(60) NOT NULL,
    parental_rating VARCHAR(16) NOT NULL CHECK (
        parental_rating in ('EVERYONE', 'EVERYONE_10_PLUS', 'TEEN', 'MATURE', 'ADULTS_ONLY')
    ),
    visualizations int8 NOT NULL DEFAULT 0,
    release_date TIMESTAMP NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NULL
);

COMMENT ON TABLE public.game IS 'Represents a game created in the platform';
COMMENT ON TABLE public.game.id IS 'Unique identifier of the game';
COMMENT ON TABLE public.game.name IS 'Name of the game';
COMMENT ON TABLE public.game.description IS 'What the game is about? This attribute tell about it';
COMMENT ON TABLE public.game.company IS 'Company that created the game';
COMMENT ON TABLE public.game.genres IS 'Genres of the game';
COMMENT ON TABLE public.game.publisher IS 'Publisher of the game';
COMMENT ON TABLE public.game.parental_rating IS 'Parental rating of the game';
COMMENT ON TABLE public.game.visualizations IS 'Number of times the game was visualized';
COMMENT ON TABLE public.game.release_date IS 'Date when the game was released';
COMMENT ON TABLE public.game.created_at IS 'Date when the game was created in the system';
COMMENT ON TABLE public.game.updated_at IS 'Date when the game was updated in the system';

-- rollback drop table game;

-- changeset eduardo.jose:1.1 labels:ddl
-- preconditions onFail:HALT onError:HALT
-- precondition-sql-check expectedResult:0 SELECT COUNT(1) FROM pg_tables where TABLENAME = 'review'
-- comment: Create review table for games
CREATE TABLE review (
    id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    description TEXT NOT NULL CHECK (length(description) < 1000),
    rating VARCHAR(11) NOT NULL CHECK (rating in ('ONE_STAR', 'TWO_STARS', 'THREE_STARS', 'FOUR_STARS', 'FIVE_STARS')),
    upvotes int4 NOT NULL DEFAULT 0,
    downvotes int4 NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    game_id int8 NOT NULL
    CONSTRAINT game_id_foreign_key FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_review_game_id ON public.review USING BTREE (game_id);

-- rollback drop table review;

COMMENT ON TABLE public.review IS 'Represents a review of a game';
COMMENT ON TABLE public.review.id IS 'Unique identifier of the review';
COMMENT ON TABLE public.review.description IS 'Review description wrote by a person';
COMMENT ON TABLE public.review.rating IS 'Rating of the review';
COMMENT ON TABLE public.review.upvotes IS 'Number of upvotes of the review';
COMMENT ON TABLE public.review.downvotes IS 'Number of downvotes of the review';
COMMENT ON TABLE public.review.created_at IS 'Date when the review was created in the system';
COMMENT ON TABLE public.review.game_id IS 'Unique identifier of the game that the review is about';